
los tres “ constantes ” están al principio de "users/forms.py", de modo que —si no quieres tocar más código— basta con ajustar sus valores y reiniciar el servidor para que los nuevos límites entren en vigor.

python
Copiar
Editar
MAX_SIZE_MB   = 5      # peso máximo en MB
MIN_DIMENSION = 512    # lado corto mínimo en px
MAX_DIMENSION = 2048   # lado largo máximo en px
Peso máximo – pon el número de MB que quieras permitir (ej. 10 para 10 MB).

Lado corto mínimo – si ya no quieres bloquear fotos pequeñas, simplemente pon 0 o elimina la comprobación en clean_profile_image().

Lado largo máximo – sube o baja el valor en píxeles






Guía‑rápida · Operadores – Reusar UI y lógica de Clientes

Formularios / Widgets

Copia UserProfileForm → OperatorProfileForm y reutiliza los mismos widgets:

address con <textarea> y clases textarea textarea-bordered ….

Campos <input> con utilidades Tailwind (border‑gray‑300, rounded‑lg, shadow‑inner, focus‑ring-red‑500).

Usa el mismo clean_profile_image() (peso, dimensiones) y ResizedImageField en el modelo User.

Avatar overlay

Mismo bloque HTML + overlay “Agregar / Modificar (JPG y PNG)”.

Input file oculto (sr-only) + preview JS (#avatar-preview, #save-hint).

Botones

Cancelar → gris (bg‑gray‑200).

Guardar cambios → azul marca (bg‑brand).

Registro Operador

Revisa que la URL /auth/register/operator/ apunte a OperatorRegistrationForm.

Asegura que la view use form_valid() → login() tras form.save().

Tailwind

Mantén las clases literales para que JIT nunca las purgue.

Si añades nuevas utilidades, agrega a safelist[] en tailwind.config.js.

Validadores

Teléfono → PHONE_REGEX.

Imagen → MAX_SIZE_MB=5, MIN_DIMENSION=512, MAX_DIMENSION=2048.















npx tailwindcss -i ./static/src/input.css -o ./static/css/styles.css --watch





Exacto — con esa sola línea basta:

npx tailwindcss -i ./static/src/input.css -o ./static/css/styles.css --watch

npx tailwindcss -i static/src/input.css -o static/css/styles.css --watch


Guárdala en un bloc de notas, tu README o un alias corto.

Cada vez que inicies la máquina: abre terminal en la raíz del proyecto, pega el comando, presiona Enter y déjalo corriendo mientras trabajas o haces la demo.

Cualquier cambio en tus templates o en input.css se recompilará al instante; si cierras la terminal o apagas la compu, solo vuelve a lanzar la línea y listo.




from django.apps import AppConfig

class MessagesConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "apps.messages"        # ruta en el proyecto
    label = "pipa_messages"       # ← NUEVO, evita colisión
    verbose_name = "Mensajes internos"



[2025-06-30]  • Se creó apps/users/validators.py SOLO para exponer phone_regex.
• Es duplicado del validador definido en apps/users/models.py.
• Pendiente: unificar validadores en módulo único (core/validators.py)
  y actualizar los imports (forms.py, models.py) en próxima refactorización.



[2025-07-01]  • App “messages” renombrada internamente a label = "pipa_messages".
  • Motivo: evitar colisión con la app nativa django.contrib.messages
    (su label también es “messages”).  Sin este cambio, Django lanza
    “Application labels aren't unique, duplicates: messages”.
  • El módulo físico sigue en apps/messages/, pero cualquier comando
    de migración debe referirse a pipa_messages.
  • Pendiente: si en el futuro se unifica con una app de notificaciones,
    revisar este label antes de publicar a producción.



[2025-07-01]  • Creación de superusuario para modelo User personalizado
  • NO usar el comando interactivo “python manage.py createsuperuser”
    porque pide `username`, campo que ya no es obligatorio/único.
  • Procedimiento recomendado desde el shell de Django:

      >>> from apps.users.models import User
      >>> User.objects.create_superuser(
      ...     email="admin@example.com",
      ...     password="TuContraseñaFuerte"
      ... )
      <User: admin@example.com (Administrador)>

  • Al omitir `username`, el UserManager genera un alias único basado
    en la parte antes de la arroba.
  • Recordar: `user_type` se establece automáticamente en "admin"
    dentro de `create_superuser`.






[2025-07-02]  • Evitamos IntegrityError duplicado:
OperatorRegistrationForm ya crea OperatorProfile
con todos los campos.  La señal post_save ahora
SOLO crea ClientProfile para user_type="client".



[2025-07-02]  • Registro de operador solo incluye datos básicos.
• Fotos de la pipa y documentos oficiales se subirán
  en la vista “Mis documentos” / “Mis vehículos”.
• Próximo sprint: añadir campos de archivo a
  OperatorProfile (INE, licencia PDF, comprobante) y
  Vehicle (front_photo, side_photo).



Nota para notas.txt: “activado namespace messages para chat”.

01-Jul-2025 – Línea messages/ incluida en django_project/urls.py; namespace activo.

[02-Jul-2025] Namespace orders_operator registrado directo en django_project/urls.py para evitar NoReverseMatch en templates operador.











Notas – Automatización de tests (Quincena 3)

ContextoSe integró pytest + pytest‑django para que, al pulsar Run en Replit, se ejecute primero el test Operator Flow y sólo si pasa se levante el servidor.

Cómo arrancar sin ejecutar los tests

SKIP_TESTS=1 python manage.py runserver 0.0.0.0:3000

Esto inicia Django directamente. La variable de entorno SKIP_TESTS evita que el bloque de .replit corra pytest.

Detener el servidor: simplemente presiona Ctrl + C en la misma consola donde está corriendo.

Archivos clave

.replit → contiene el bloque que corre pytest antes de runserver.

pytest.ini → configura Django para los tests.

tests/test_operator_flow.py → prueba automática del flujo Operador.

Última actualización: 05‑Jul‑2025






[Q3] Favicon pendiente
— Se eliminó la línea del favicon (<link rel="icon" ...>) en templates/base.html
  para evitar el error “Missing staticfiles manifest entry” que WhiteNoise lanza
  durante los tests y en desarrollo.
— Volver a colocarla en Quincena 5, después de ejecutar `collectstatic`
  y generar el manifest (deploy).





2025‑07‑07 ▸ Solución final chat Q3:
- Se añadió script HTMX 1.9.10 en base.html.
- Formularios hx-post ahora envían vía Ajax (POST 204) y la lista se refresca.
- Verificado: mensajes fluyen en ambos roles sin duplicados.

2025‑07‑07 ▸ Q3 
- Añadido script HTMX 1.9.10 en base.html.
- OrderChatView entrega chat_page.html (carga inicial) o _list.html (HTMX).
- _form.html sin hx-include → body llega correctamente.
- Verificado flujo operador⇄cliente sin duplicados (POST 204 / refresh 5 s).



admin.py: se eliminó import redundante de inlines; las clases OrderStatusHistoryInline y OrderRatingInline ya viven en el mismo archivo.



urls_operator.py actualizado: se añadió ruta /today/ y se importó OperatorTodayListView.

Templates operator/orders_pending.html y operator/orders_today.html actualizados para filtros zona/colonia y rutas correctas.



• Ejecutar:
    python manage.py makemigrations vehicles
    python manage.py migrate
  para registrar ajustes Meta de Vehicle.
• Pendiente técnico: agregar order_by('-created_at') en PaymentList para evitar warning.
• Warnings STATICFILES y staticfiles/ se abordarán en fase de deploy (no afectan la demo).

• vehicles.0002 applied – estructura de Vehicle sincronizada.
• Entorno dev limpio (0 system checks).
• Pendiente warning en PaymentList → agregar order_by('-created_at').



Filtrado instantáneo:
• Añadido onchange="this.form.submit()" al <select> zona (sin backend extra).
• Botón Filtrar se puede ocultar si ya no se usa.


Filtrado instantáneo:
• Añadido onchange="this.form.submit()" al <select> zona (sin backend extra).
• Botón Filtrar se puede ocultar si ya no se usa.


08 Jul 2025: Template create_order.html actualizado: se integra campo zone, se muestran errores globales y se alinea el orden de los campos.

08 Jul 2025: Campo colonia expuesto en OrderRequestForm y plantilla de creación de pedido; facilita clasificación de pedidos por zona + colonia.
08 Jul 2025: Se decidió hacer colonia obligatoria.  blank=False + migración

08 Jul 2025: Añadido apps/orders/mixins.py con OperatorRequiredMixin; corrige ModuleNotFoundError y restaura todas las vistas de operador.

8 Jul 2025: Filtrado de pedidos pendiente actualizado: zona y fecha funcionan de forma independiente y se combinan con lógica AND cuando ambos están presentes.

09 Jul 2025: Aclaradas funciones de “Entregas de hoy” vs “Mis entregas asignadas”. Se entregan ambos templates con el diseño coral corporativo unificado y botones Tailwind.

Nota 09‑jul‑2025
Recordar que todo se ejecuta en Replit sin carpeta config: revisar cualquier import o setting que aún apunte allí antes de correr tests o deploy.


09‑jul‑2025 – Corregido enlace en orders_history.html: ahora usa {% url 'payments:payment-create' order_pk=order.id %} para resolver NoReverseMatch.









[Quincena 3] Flujo de aceptación sin pipa
– Se retiró la validación estricta de vehículo.
– El operador puede aceptar pedidos aunque vehicle=None.
– Campo vehicle se llenará más adelante cuando exista UI de flotilla.
Commit aplicado en views_operator.py (fecha 2025‑07‑10).
